<?php

declare(strict_types=1);

use Application\View\HelperTrait;
use Decision\Form\Document as DocumentForm;
use Decision\Model\Enums\MeetingTypes;
use Decision\Model\Meeting as MeetingModel;
use Laminas\Form\Form;
use Laminas\View\Renderer\PhpRenderer;

/**
 * @var PhpRenderer|HelperTrait $this
 * @var DocumentForm $form
 * @var MeetingModel|null $meeting
 * @var int $number
 * @var MeetingTypes $type
 */

$this->scriptUrl()->requireUrls(
    [
        'decision_admin/delete_document',
        'decision_admin/rename_document',
    ],
    ['document_id'],
);

$this->breadcrumbs()
    ->addBreadcrumb($this->translate('Meetings'))
    ->addBreadcrumb($this->translate('Documents'));

if (isset($noMeetings) && $noMeetings): ?>
    <?= $this->translate('There are no meetings for which you can upload documents.') ?>
<?php
else:
    if (isset($success) && $success): ?>
        <?= $this->translate('Meeting document uploaded'); ?>
    <?php endif; ?>
    <?php
    $form->prepare();

    $form->setAttribute('method', 'post');

    $form->setAttribute('class', 'form-horizontal');
    ?>
    <?= $this->form()->openTag($form); ?>
    <?php
    $element = $form->get('meeting');
    ?>
    <div class="form-group">
        <label for="<?= $element->getName() ?>" class="control-label col-sm-2"><?= $element->getLabel() ?></label>
        <div class="col-sm-10">
            <select class="form-control" name="meeting" id="meeting-selector">
                <?php if (!empty($meetings)): ?>
                    <?php foreach ($meetings as $m): ?>
                        <option value="<?= $m->getType()->value ?>/<?= $m->getNumber() ?>"
                            <?= ($m->getNumber() === $number && $m->getType()->value === $type->value) ? 'selected' : '' ?>>
                            <?= $m->getType()->value ?> <?= $m->getNumber() ?> (<?= $m->getDate()->format('Y-m-d') ?>)
                        </option>
                    <?php endforeach; ?>
                <?php else: ?>
                    <option selected disabled><?= $this->translate('No meeting available.') ?></option>
                <?php endif; ?>
            </select>
        </div>
    </div>
    <div class="form-group">
        <?php
        $element = $form->get('name');
        $element->setAttribute('class', 'form-control');
        $element->setAttribute('placeholder', $this->translate('Name'));
        $element->setAttribute('required', 'required');
        ?>
        <label for="<?= $element->getName() ?>" class="control-label col-sm-2"><?= $element->getLabel() ?></label>
        <div class="col-sm-10">
            <?= $this->formText($element); ?>
            <?= $this->formElementErrors($element); ?>
        </div>
    </div>

    <div class="form-group">
        <?php $fileElement = $form->get('upload'); ?>
        <label for="<?= $fileElement->getName() ?>" class="control-label col-sm-2"><?= $fileElement->getLabel() ?></label>
        <div class="col-sm-10">
            <?= $this->formFile($fileElement); ?>
            <?= $this->formElementErrors($fileElement); ?>
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-offset-2 col-sm-10">
            <?php
            $submit = $form->get('submit');
            $submit->setLabel($submit->getValue());
            $submit->setAttribute('class', 'btn btn-default');
            ?>
            <?= $this->formButton($submit) ?>
        </div>
    </div>

    <?= $this->form()->closeTag(); ?>
    <?php if (null !== $meeting): ?>
        <h3><?= $this->translate('Documents for this meeting') ?></h3>
        <div class="col-sm-12">
            <?php if (0 === $meeting->getDocuments()->count()): ?>
                <p><?= $this->translate('This meeting does not have any associated documents.') ?></p>
            <?php else: ?>
                <?php $pastMeeting = $meeting->getDate() <= new DateTime('now'); ?>
                <span id="meeting-info"
                      data-meeting-type="<?= $meeting->getType()->value ?>"
                      data-meeting-number="<?= $meeting->getNumber() ?>">
                </span>
                <table class="table table-striped table-hover table-documents">
                    <tbody>
                        <?php foreach ($meeting->getDocuments() as $document): ?>
                            <tr data-id="<?= $document->getId() ?>" draggable="true" ondragstart="handleDragStart(event)"
                                ondragover="handleDragOver(event)" ondrop="handleDrop(event)"
                                ondragend="handleDragEnd(event)" class="list-draggable"
                            >
                                <td class="drag-handle"><span class="fas fa-arrows-up-down"></span></td>
                                <td>
                                    <a href="<?= $this->url('decision/document', ['id' => $document->getId()]) ?>">
                                        <?= $this->escapeHtml($document->getName()) ?>
                                    </a>
                                </td>
                                <td>
                                    <button data-document-id="<?= $document->getId() ?>"
                                            data-document-name="<?= $this->escapeHtmlAttr($document->getName()) ?>"
                                            class="btn btn-primary btn-xs btn-rename">
                                        <?= $this->translate('Rename')?>
                                    </button>
                                    <button data-document-id="<?= $document->getId() ?>"
                                            data-document-name="<?= $this->escapeHtmlAttr($document->getName()) ?>"
                                            class="btn btn-primary btn-xs btn-delete">
                                        <?= $this->translate('Delete')?>
                                    </button>
                                </td>
                            </tr>
                        <?php endforeach ?>
                    </tbody>
                </table>
                <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                                <h4 class="modal-title"><?= $this->translate('Delete Document') ?></h4>
                            </div>
                            <div class="modal-body">
                                <p>
                                    <?= sprintf(
                                        $this->translate(
                                            'Are you sure you want to delete %s?'
                                        ),
                                        '<strong id="delete-document-name"></strong>',
                                    ) ?>
                                </p>
                            </div>
                            <div class="modal-footer">
                                <form method="post" class="form form-inline form-delete">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">
                                        <?= $this->translate('Cancel') ?>
                                    </button>
                                    <button type="submit" class="btn btn-danger">
                                        <span class="far fa-trash-alt"></span>&nbsp;<?= $this->translate('Delete') ?>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal fade" id="renameModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                                <h4 class="modal-title"><?= $this->translate('Rename Meeting Document') ?></h4>
                            </div>
                            <div class="modal-body">
                                <p><?= $this->translate('Enter a new name for this document:') ?></p>
                                <input type="text" name="name" placeholder="Name" class="form-control"
                                       id="new-document-name" form="form-rename">
                            </div>
                            <div class="modal-footer">
                                <form method="post" class="form form-inline form-rename" id="form-rename">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">
                                        <?= $this->translate('Cancel') ?>
                                    </button>
                                    <button type="submit" class="btn btn-success">
                                        <span class="fas fa-file-pen"></span>&nbsp;<?= $this->translate('Rename') ?>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            <?php endif; ?>
        </div>
    <?php endif; ?>
    <script nonce="<?= NONCE_REPLACEMENT_STRING ?>">
        let list = document.querySelector('.table-documents tbody');
        let history = [];
        let draggingItem, newPosition;

        function findListItem(id) {
            return list.querySelector('[data-id="' + id + '"]');
        }

        function pushToHistory(item, oldPosition, newPosition) {
            history.push({ item: item, oldPosition: oldPosition, newPosition: newPosition });
        }

        function reverseLastStep() {
            let lastAction = history.pop();

            if (lastAction) {
                let listItem = findListItem(lastAction.item);

                // If previous position is zero (0), just insert element back at start.
                if (0 === lastAction.oldPosition) {
                    list.insertBefore(listItem, list.firstChild);

                    return;
                }

                // If previous position was at end of the list, insert the element at the end.
                if (list.childElementCount - 1 === lastAction.oldPosition) {
                    list.appendChild(listItem);

                    return;
                }

                // Otherwise, insert before the item currently in the previous position.
                let target = list.children[lastAction.oldPosition];
                if (listItem.compareDocumentPosition(target) & Node.DOCUMENT_POSITION_PRECEDING) {
                    list.insertBefore(listItem, target);
                } else {
                    list.insertBefore(listItem, target.nextSibling);
                }
            }
        }

        function handleDragStart(event) {
            draggingItem = event.target.closest('tr');

            if (!draggingItem) return;

            let oldPosition = Array.prototype.indexOf.call(list.children, draggingItem);
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', JSON.stringify({ id: draggingItem.getAttribute('data-id'), oldPosition: oldPosition }));
            draggingItem.classList.add('dragging');
        }

        function handleDragOver(event) {
            event.preventDefault();
            let target = event.target.closest('tr');

            if (!target || target === draggingItem || target.parentNode !== list) return;

            let bounding = target.getBoundingClientRect();
            let offset = bounding.y + (bounding.height / 2);

            if (event.clientY - offset > 0) {
                list.insertBefore(draggingItem, target.nextSibling);
            } else {
                list.insertBefore(draggingItem, target);
            }
        }

        function handleDrop(event) {
            event.preventDefault();
            let data = JSON.parse(event.dataTransfer.getData('text/plain'));
            let id = data.id;
            let oldPosition = data.oldPosition;

            list.childNodes.forEach(child => {
                if (child.nodeType === Node.ELEMENT_NODE) {
                    child.style.pointerEvents = 'none';
                    child.draggable = false;

                    let dragHandleIcon = child.querySelector('.drag-handle .fas');
                    dragHandleIcon.classList.remove('fa-arrows-up-down');
                    dragHandleIcon.classList.add('fa-spinner', 'fa-spin');
                }
            });

            // Calculate the new position based on the ID.
            var listItem = findListItem(id);
            let newPosition = Array.prototype.indexOf.call(list.children, draggingItem);

            pushToHistory(id, oldPosition, newPosition);

            // Using fetch for the AJAX call
            fetch('<?= $this->url('decision_admin/position_document/post') ?>', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: new URLSearchParams({
                    id: id,
                    position: newPosition
                })
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(error => {
                            throw new Error(error);
                        });
                    }
                })
                .catch(error => {
                    console.error('Something unexpected happened. Reordering the list failed.', error);
                    reverseLastStep();
                })
                .finally(() => {
                    list.childNodes.forEach(child => {
                        if (child.nodeType === Node.ELEMENT_NODE) {
                            child.style.pointerEvents = 'auto';
                            child.draggable = true;

                            let dragHandleIcon = child.querySelector('.drag-handle .fas');
                            dragHandleIcon.classList.remove('fa-spinner', 'fa-spin');
                            dragHandleIcon.classList.add('fa-arrows-up-down');
                        }
                    });
                });

            draggingItem.classList.remove('dragging');
        }


        function handleDragEnd(event) {
            if (draggingItem) {
                draggingItem.classList.remove('dragging');
            }
        }

        document.getElementById('meeting-selector').addEventListener('change', e => {
            window.location = '<?= $this->url('decision_admin/document') ?>/' + e.target.value;
        });

        document.querySelectorAll('.btn-delete').forEach((element) => {
            element.addEventListener('click', () => {
                document.querySelector('#delete-document-name').textContent = element.dataset.documentName;
                document.querySelector('.form-delete').action = URLHelper.url(
                    'decision_admin/delete_document',
                    {'document_id': element.dataset.documentId},
                );
                $('#deleteModal').modal('show');
            })
        });

        document.querySelectorAll('.btn-rename').forEach((element) => {
            element.addEventListener('click', () => {
                document.querySelector('#new-document-name').value = element.dataset.documentName;
                document.querySelector('.form-rename').action = URLHelper.url(
                    'decision_admin/rename_document',
                    {'document_id': element.dataset.documentId},
                );
                $('#renameModal').modal('show');
            })
        });
    </script>
<?php endif; ?>
