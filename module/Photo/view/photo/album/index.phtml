<?php

declare(strict_types=1);

use Application\View\HelperTrait;
use Decision\Model\AssociationYear;
use Laminas\Permissions\Acl\Acl;
use Laminas\View\Renderer\PhpRenderer;
use Photo\Model\{
    MemberAlbum,
    VirtualAlbum,
    WeeklyAlbum,
};
use User\Permissions\Assertion\IsAfterMembershipEndedAndNotTagged;

/**
 * @var PhpRenderer|HelperTrait $this
 * @var MemberAlbum|VirtualAlbum|WeeklyAlbum $album
 * @var array $config
 * @var bool $hasRecentVote
 */

$this->headTitle($album->getName());
$currentAlbum = $album;
while (null !== $currentAlbum->getParent()) {
    $this->headTitle($currentAlbum->getParent()->getName());
    $currentAlbum = $currentAlbum->getParent();
}
$this->headTitle($this->translate('Photos'));
?>
<?php $this->headScript()
    ->appendFile(
        $this->basepath('js/autocomplete.min.js'),
        'text/javascript',
        ['nonce' => NONCE_REPLACEMENT_STRING],
    )
    ->appendFile(
        $this->basepath('js/photo.js'),
        'text/javascript',
        ['nonce' => NONCE_REPLACEMENT_STRING],
    )
    ->appendFile(
        $this->basepath('js/masonry.pkgd.min.js'),
        'text/javascript',
        ['nonce' => NONCE_REPLACEMENT_STRING],
    )
    ->appendFile(
        $this->basepath('js/lazyload.min.js'),
        'text/javascript',
        ['nonce' => NONCE_REPLACEMENT_STRING],
    );
$this->headLink()->appendStylesheet($this->basepath('css/photoswipe.css'));

$this->scriptUrl()->requireUrl('member/search')
    ->requireUrl('member/view', ['lidnr'])
    ->requireUrl('photo/photo/tag/add', ['photo_id', 'lidnr'])
    ->requireUrl('photo/photo/tag/remove', ['photo_id', 'lidnr']);
?>
<nav class="navbar-breadcrumb" aria-label="breadcrumb">
    <div class="container">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="<?= $this->url('photo') ?>">
                    <?= $this->translate('Photos') ?>
                </a>
            </li>
            <?php if (!$currentAlbum instanceof VirtualAlbum): ?>
                <li class="breadcrumb-item">
                    <?php
                    // determine association year
                    if (null !== ($startDateTime = $album->getStartDateTime())):
                        $associationYear = AssociationYear::fromDate($startDateTime);
                    ?>
                        <a href="<?= $this->url('photo/year', ['year' => $associationYear->getYear()]); ?>">
                            <?= $associationYear->getYearString() ?>
                        </a>
                    <?php endif; ?>
                </li>
            <?php elseif ($currentAlbum instanceof WeeklyAlbum): ?>
                <li class="breadcrumb-item">
                    <a href="<?= $this->url('photo/weekly') ?>"><?= $this->translate('Photos of the Week') ?></a>
                </li>
            <?php endif; ?>
            <?php
            // first we need to get all parents
            $crumbs = [];
            if (null !== $album->getParent()) {
                $currentAlbum = $album;
                while (null !== $currentAlbum->getParent()) {
                    // prepend parent to array
                    array_unshift($crumbs, [
                        'url' => $this->url(
                            'photo/album',
                            [
                                'album_id' => $currentAlbum->getParent()->getId(),
                                'album_type' => 'album',
                            ],
                        ),
                        'name' => $currentAlbum->getParent()->getName(),
                    ]);
                    $currentAlbum = $currentAlbum->getParent();
                }
            }
            // then we print them
            foreach ($crumbs as $crumb): ?>
                <li class="breadcrumb-item">
                    <a href="<?= $crumb['url'] ?>">
                        <?= $this->escapeHtml($crumb['name']) ?>
                    </a>
                </li>
            <?php endforeach; ?>
            <li class="breadcrumb-item active">
                <?php if ($album instanceof MemberAlbum): ?>
                    <span class="fas fa-user"></span>
                    &nbsp;
                <?php elseif ($album instanceof WeeklyAlbum): ?>
                    <span class="fas fa-award"></span>
                    &nbsp;
                <?php endif; ?>
                <?= $this->escapeHtml($album->getName()); ?>
            </li>
        </ol>
    </div>
</nav>

<section class="section">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">
                    <?= $this->escapeHtml($album->getName()); ?>
                    <small>
                        <?php if ($album instanceof MemberAlbum): ?>
                            <a href="<?= $this->url('member/view', ['lidnr' => $album->getMember()->getLidnr()]) ?>">
                                <?= strtolower($this->translate("View user profile")) ?>
                            </a>
                        <?php elseif ($album instanceof WeeklyAlbum): ?>
                            <?= sprintf(
                                    '%s/%s',
                                    $album->getStartDateTime()->format('Y'),
                                    $album->getEndDateTime()->format('Y')
                                ) ?>
                        <?php else: ?>
                            <?php if (null !== ($startDateTime = $album->getStartDateTime())): ?>
                                <?= $album->getStartDateTime()->format('Y-m-d') ?>
                            <?php else: ?>
                                <?= $this->translate('No date') ?>
                            <?php endif; ?>
                        <?php endif; ?>
                    </small>
                </h1>
            </div>
        </div>
        <?php
        $shownAlbums = 0;
        if ($album->getAlbumCount() > 0):
        ?>
            <?php $lastWeek = (new DateTime('now'))->sub(new DateInterval('P7D')); ?>
            <div class="row row-height-equal">
                <?php foreach ($album->getChildren() as $item): ?>
                    <?php
                    if (
                        (
                            (
                                null !== $album->getStartDateTime()
                                && null !== $album->getEndDateTime()
                            )
                            || $this->acl('photo_service_acl')->isAllowed('album', 'nodate')
                        )
                        && !(new IsAfterMembershipEndedAndNotTagged())->assert(
                            // We can use a fake ACL as it is never used in the actual assertion (`getAcl()` is
                            // protected on our normal ACLs).
                            new Acl(),
                            $this->identity(),
                            $item,
                        )
                    ):
                        $shownAlbums++;
                    ?>
                        <div class="col-lg-2 col-md-3 col-xs-6 thumb">
                            <a class="thumbnail" href="<?= $this->url(
                                'photo/album',
                                [
                                    'album_id' => $item->getId(),
                                    'album_type' => 'album',
                                ],
                            ) ?>">
                                <?php if (null !== ($albumCover = $item->getCoverPath())): ?>
                                    <img class="img-responsive" src="<?= $this->fileUrl($albumCover) ?>" alt="">
                                <?php else: ?>
                                    <img class="img-responsive" src="/img/missing_cover.svg" alt="">
                                <?php endif; ?>
                                <div class="caption">
                                    <p>
                                        <?php if ($item->getCreatedAt() >= $lastWeek): ?>
                                            <span class="label label-primary">
                                                <?= $this->translate('NEW') ?>
                                            </span>&nbsp;
                                        <?php endif; ?>
                                        <?= $this->escapeHtml($item->getName()); ?>
                                    </p>
                                </div>
                            </a>
                        </div>
                    <?php endif; ?>
                <?php endforeach ?>
            </div>
        <?php endif; ?>
        <?php if (0 < $shownAlbums): ?>
            <hr>
        <?php endif; ?>
        <?php
        $lidnr = $this->identity()->getLidnr();
        // Check permissions once, to prevent repeatedly retrieving the logged in `Member`.
        $canViewMetadata = $this->acl('photo_service_acl')->isAllowed('photo', 'view_metadata');
        ?>
        <div class="pswp-gallery"
             data-recent-vote="<?= $hasRecentVote ? 'true' : 'false' ?>"
             data-lidnr="<?= $lidnr ?>"
        >
            <?php if (0 === $album->getPhotoCount(false)): ?>
                <p><?= $this->translate('This album does not contain any photos.') ?></p>
            <?php else: ?>
                <div class="grid-sizer"></div>
                <div class="gutter-sizer"></div>
                <?php foreach ($album->getPhotos() as $key => $item): ?>
                    <?php
                    $ar = $item->getAspectRatio();
                    $width = $config['small_thumb_size']['width'];
                    $thumbnailSize = [
                        'w' => $width,
                        'h' => round($width * $ar)
                    ];

                    $width = $config['large_thumb_size']['width'];
                    $largeSize = [
                        'w' => $width,
                        'h' => round($width * $ar)
                    ];

                    // Don't retrieve photo of the week when we are viewing photos of the week.
                    $weeklyPhoto = null;
                    if (!($album instanceof WeeklyAlbum)) {
                        $weeklyPhoto = $item->getWeeklyPhoto();

                        if (null !== $weeklyPhoto) {
                            $thumbnailSize = array_map(
                                function($value) {
                                    return round($value * 1.75);
                                },
                                $thumbnailSize,
                            );
                        }
                    }
                    ?>
                    <figure
                        class="pswp-gallery__item<?= (null === $weeklyPhoto) ? '' : ' potw-thumb' ?>"
                        data-id="<?= $item->getId() ?>"
                        data-author="GEWIS"
                        data-raw-url="<?= $this->url('photo/photo_download', ['photo_id' => $item->getId()]) ?>"
                        <?php if ($album instanceof VirtualAlbum): ?>
                            data-original-album="<?= $this->url(
                                'photo/album',
                                ['album_id' => $item->getAlbum()->getId(), 'album_type' => 'album']
                            ) ?>"
                        <?php endif; ?>
                        data-profile-photo-url="<?= $this->url('photo/set_profile_photo', ['photo_id' => $item->getId()]) ?>"
                        data-details-url="<?= $this->url('api_photo/details', ['photo_id' => $item->getId()]) ?>"
                        data-vote-url="<?= $this->url('photo/photo/vote', ['photo_id' => $item->getId()]) ?>"
                        <?php if (null !== $weeklyPhoto): ?>
                            data-weekly-date="<?= $weeklyPhoto->getWeek()->format('c') ?>"
                        <?php elseif ($album instanceof WeeklyAlbum): ?>
                            data-weekly-date="<?= $album->getDates()[$key]->format('c') ?>"
                        <?php endif; ?>
                    >
                        <a href="<?= $this->glideUrl()->getUrl($item->getPath(), $largeSize) ?>"
                           target="_blank"
                           data-pswp-height="<?= $largeSize['h'] ?>"
                           data-pswp-width="<?= $largeSize['w'] ?>"
                        >
                            <img
                                class="lazy-load"
                                data-height="<?= $thumbnailSize['h'] ?>"
                                data-width="<?= $thumbnailSize['w'] ?>"
                                data-src="<?= $this->glideUrl()->getUrl($item->getPath(), $thumbnailSize) ?>"
                                alt=""
                            >
                        </a>
                        <figcaption class="hidden">
                            <?php if ($canViewMetadata): ?>
                                <?= $this->partial('partial/metadata.phtml', ['photo' => $item]) ?>
                            <?php endif; ?>
                        </figcaption>
                        <figtags class="hidden"></figtags>
                    </figure>
                <?php endforeach; ?>
            <?php endif; ?>
        </div>
    </div>
</section>
<script nonce="<?= NONCE_REPLACEMENT_STRING ?>">
    $(document).ready(function () {
        Photo.initGrid();
    });

    const addTagSearch = (el, figTags) => {
        // Remove any old autocomplete suggestion boxes.
        document.querySelectorAll('.autocomplete-suggestions').forEach(element => {
            element.remove();
        });

        // Make it possible to add new tags.
        let tagSearch = el.querySelector('.tagSearch');
        new VanillaAutocomplete(tagSearch, {
            minChars: 2,
            lookup: function (query, done) {
                $.getJSON(URLHelper.url('member/search') + '?q=' + query, function (data) {
                    let result = {suggestions: []};

                    $.each(data.members, function (i, member) {
                        result.suggestions.push({
                            'value': member.fullName, 'data': member.lidnr
                        })
                    });

                    done(result);
                });
            },
            orientation: 'top',
            onSelect: function (suggestion) {
                $.post(tagSearch.dataset.url.replace('lidnr', suggestion.data),
                    { lidnr: suggestion.data }
                    , function (data) {
                        if (data.success) {
                            let removeURL = URLHelper.url('photo/photo/tag/remove', {
                                'photo_id': data.tag.photo_id,
                                'lidnr': data.tag.member_id
                            });

                            let memberURL = URLHelper.url('member/view', {
                                'lidnr': data.tag.member_id
                            });

                            // Start writing the tag into the current slide.
                            let tagList = el.querySelector('.tagList');
                            let spacer = (0 !== tagList.childElementCount) ?
                                ((1 === tagList.childElementCount) ?
                                    ' <?= $this->translate('and') ?> '
                                    : ',&nbsp')
                                : '';

                            // Check if there were previously no tags to ensure we show the correct
                            // text to the user.
                            if (0 === tagList.childElementCount) {
                                el.querySelector('.no-tag-title').classList.add('hidden');
                                el.querySelector('.tag-title').classList.remove('hidden');
                            }

                            // Insert the new tag directly at the beginning of the tag list, this
                            // prevents us from having to deal with the complicated logic of having
                            // to deal with the commas and 'and' between the tags.
                            tagList.insertAdjacentHTML(
                                'afterbegin',
                                `
                                    <span data-member="${data.tag.member_id}">
                                        <a href="${memberURL}">${suggestion.value}</a>
                                        <a href="${removeURL}" class="remove-tag"
                                            data-tag-id="removeTag${data.tag.id}">
                                            <span class="fas fa-times" aria-hidden="true"></span>
                                        </a>
                                        <span class="tag-spacer">${spacer}</span>
                                    </span>
                                `
                            );

                            // Because we want to "cache" the current slide's tags for future usage
                            // and prevent having to make too many requests, we have to write the
                            // current "state" of the tags back into the actual DOM element.
                            figTags.innerHTML = el.innerHTML;

                            if (data.tag.member_id === parseInt(document.querySelector('.pswp-gallery').dataset.lidnr)) {
                                document.querySelector('.pswp__button--profile-photo-button').classList.remove('pswp__button--hidden');
                            }

                            Photo.initRemoveTag(el.querySelector('a[data-tag-id="removeTag' + data.tag.id + '"]'));
                        }

                        tagSearch.value = '';
                        tagSearch.focus();
                    });
            },
            zIndex: 100000,
        });

        // Make tags removable.
        el.querySelectorAll('.remove-tag').forEach(element => {
            Photo.initRemoveTag(element);
        });
    };

    const updateVotedState = (el, voted) => {
        if ('true' === voted) {
            el.firstChild.classList.add('pswp__icn-red');
            el.dataset.originalTitle = '<?= $this->translate('Already voted!') ?>';
        } else {
            el.firstChild.classList.remove('pswp__icn-red');
            el.dataset.originalTitle = '<?= $this->translate('Vote for photo of the week') ?>';
        }
    };

    Date.prototype.getWeekNumber = function() {
        let d = new Date(Date.UTC(this.getFullYear(), this.getMonth(), this.getDate()));
        let dayNum = d.getUTCDay() || 7;
        d.setUTCDate(d.getUTCDate() + 4 - dayNum);
        let yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));

        return Math.ceil((((d - yearStart) / 86400000) + 1) / 7)
    };
</script>
<script type="module" nonce="<?= NONCE_REPLACEMENT_STRING ?>">
    import PhotoSwipeLightbox from '<?= $this->basePath('js/photoswipe-lightbox.esm.min.js') ?>';

    const leftArrowSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 50 30" width="50" height="30"><use href="<?= $this->basePath('sprites/fontawesome/solid.svg#chevron-left') ?>"></use></svg>';
    const closeSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 32 32" width="32" height="32"><use href="<?= $this->basePath('sprites/fontawesome/solid.svg#xmark') ?>"></use></svg>';
    const zoomSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 32 32" width="32" height="32"><use class="pswp__icn-zoom-plus" href="<?= $this->basePath('sprites/fontawesome/solid.svg#magnifying-glass-plus') ?>"></use><use class="pswp__icn-zoom-minus" href="<?= $this->basePath('sprites/fontawesome/solid.svg#magnifying-glass-minus') ?>"></use></svg>';

    let lastActiveElement = null;

    const lightbox = new PhotoSwipeLightbox({
        gallery: '.pswp-gallery',
        children: '.pswp-gallery__item',
        bgOpacity: 0.9,

        // Use FontAwesome for all icons.
        arrowPrevSVG: leftArrowSVGString,
        arrowNextSVG: leftArrowSVGString,
        closeSVG: closeSVGString,
        zoomSVG: zoomSVGString,

        // Update translations.
        closeTitle: '<?= $this->translate('Close') ?>',
        zoomTitle: '<?= $this->translate('Zoom (z)') ?>',
        arrowPrevTitle: '<?=  $this->translate('Previous') ?>',
        arrowNextTitle: '<?=  $this->translate('Next') ?>',
        errorMsg: '<?= $this->translate('The image could not be loaded.') ?>',

        pswpModule: () => import('<?= $this->basePath('js/photoswipe.esm.min.js') ?>'),
    });

    lightbox.on('uiRegister', () => {
        // Register custom buttons.
        <?php if ($this->acl('photo_service_acl')->isAllowed('photo', 'download')): ?>
            lightbox.pswp.ui.registerElement({
                name: 'download-button',
                appendTo: 'bar',
                order: 13,
                isButton: true,
                title: '<?= $this->translate('Download') ?>',
                html: {
                    isCustomSVG: true,
                    inner: '<use href="<?= $this->basePath('sprites/fontawesome/solid.svg#download') ?>"></use>',
                },
                onClick: (event, el, pswp) => {
                    let downloadUrl = pswp.currSlide.data.element.dataset.rawUrl;
                    let link = document.createElement('a');

                    link.href = downloadUrl;
                    link.download = '';
                    document.body.appendChild(link);

                    link.click();
                    link.remove();
                },
            });
        <?php endif; ?>

        lightbox.pswp.ui.registerElement({
            name: 'share-button',
            appendTo: 'bar',
            order: 12,
            isButton: true,
            title: '<?= $this->translate('Share') ?>',
            html: {
                isCustomSVG: true,
                inner: '<use href="<?= $this->basePath('sprites/fontawesome/solid.svg#share') ?>"></use>',
            },
            onClick: (event, el, pswp) => {
                let id = pswp.currSlide.data.element.dataset.id;
                let currentURL = window.location.origin + window.location.pathname;
                let photoURL = currentURL + '#pid=' + id;

                navigator.clipboard.writeText(photoURL).then(() => {
                    el.dataset.originalTitle = '<?= $this->translate('Copied URL!') ?>';
                });
            },
        });

        <?php if ($album instanceof VirtualAlbum): ?>
            lightbox.pswp.ui.registerElement({
                name: 'original-album-button',
                appendTo: 'bar',
                order: 11,
                isButton: true,
                title: '<?= $this->translate('Go to album') ?>',
                html: {
                    isCustomSVG: true,
                    inner: '<use href="<?= $this->basePath('sprites/fontawesome/solid.svg#images') ?>"></use>',
                },
                onClick: (event, el, pswp) => {
                    let id = pswp.currSlide.data.element.dataset.id;
                    let originalAlbum = pswp.currSlide.data.element.dataset.originalAlbum;
                    let photoURL = originalAlbum + '#pid=' + id;

                    window.open(photoURL, '_blank').focus();
                },
            });
        <?php endif; ?>

        <?php if ($this->acl('photo_service_acl')->isAllowed('photo', 'view_metadata')): ?>
            lightbox.pswp.ui.registerElement({
                name: 'metadata-button',
                appendTo: 'bar',
                order: 9,
                isButton: true,
                title: '<?= $this->translate('Information') ?>',
                html: {
                    isCustomSVG: true,
                    inner: '<use href="<?= $this->basePath('sprites/fontawesome/solid.svg#circle-info') ?>"></use>',
                },
                onClick: () => {
                    let metadata = document.querySelector('.pswp__metadata-ui');

                    if (metadata.classList.contains('pswp__metadata-ui-open')) {
                        metadata.classList.remove('pswp__metadata-ui-open');
                    } else {
                        metadata.classList.add('pswp__metadata-ui-open');
                    }
                },
            });
        <?php endif; ?>

        lightbox.pswp.ui.registerElement({
            name: 'profile-photo-button',
            appendTo: 'bar',
            order: 8,
            isButton: true,
            title: '<?= $this->translate('Set as profile picture') ?>',
            html: {
                isCustomSVG: true,
                inner: '<use href="<?= $this->basePath('sprites/fontawesome/solid.svg#image-portrait') ?>"></use>',
            },
            onInit: (el, pswp) => {
                // Hide button by default, it should only be shown through tags.
                pswp.on('change', () => {
                    el.classList.add('pswp__button--hidden');
                });
            },
            onClick: (event, el, pswp) => {
                let currentSlide = pswp.currSlide.data.element;

                fetch(currentSlide.dataset.profilePhotoUrl, { method: 'POST' })
                    .then(response => response.json())
                    .then(result => {
                        el.dataset.originalTitle = '<?= $this->translate('Set as profile picture!') ?>';
                    }).catch(error => {
                        // An error occurred somewhere along the way, perhaps we should notify the user.
                        el.dataset.originalTitle = '<?= $this->translate('Could not set as profile photo, try again') ?>';
                    });
            },
        });

        <?php if ($this->acl('photo_service_acl')->isAllowed('vote', 'view')): ?>
            lightbox.pswp.ui.registerElement({
                name: 'like-button',
                appendTo: 'bar',
                order: 7,
                isButton: true,
                title: '<?= $this->translate('Vote for photo of the week') ?>',
                html: {
                    isCustomSVG: true,
                    inner: '<use href="<?= $this->basePath('sprites/fontawesome/solid.svg#thumbs-up') ?>"></use>',
                },
                onInit: (el, pswp) => {
                    pswp.on('change', () => {
                        // Add a pulsing dot if the user has not recently voted for a photo.
                        if ('false' === pswp.options.dataSource.gallery.dataset.recentVote) {
                            if (1 === el.childElementCount) {
                                const pulsingDot = document.createElement('span');
                                pulsingDot.classList.add('pulsing-dot');
                                el.appendChild(pulsingDot);
                            }
                        }

                        updateVotedState(el, pswp.currSlide.data.element.dataset.voted);
                    });

                    pswp.on('votedLoaded', ({voted}) => {
                        // Check that we were able to load the voted status.
                        if (null === voted) {
                            el.dataset.originalTitle = '<?= $this->translate('Cannot load vote') ?>';

                            return;
                        }

                        pswp.currSlide.data.element.dataset.voted = voted;
                        updateVotedState(el, pswp.currSlide.data.element.dataset.voted);
                    });
                },
                <?php if ($this->acl('photo_service_acl')->isAllowed('vote', 'add')): ?>
                    onClick: (event, el, pswp) => {
                        let currentSlide = pswp.currSlide.data.element;
                        let hasVoted = pswp.currSlide.data.element.dataset.voted;

                        if ('false' === hasVoted) {
                            fetch(currentSlide.dataset.voteUrl, { method: 'POST' })
                                .then(response => response.json())
                                .then(result => {
                                    pswp.currSlide.data.voted = true;
                                    el.firstChild.classList.add('pswp__icn-red');
                                    el.dataset.originalTitle = '<?= $this->translate('Voted!') ?>';

                                    // Remove the pulsing dot if it is present.
                                    const pulsingdot = document.querySelector('.pulsing-dot');
                                    if (null !== pulsingdot) {
                                        el.removeChild(pulsingdot);
                                    }

                                    // Also update the recent vote status.
                                    pswp.options.dataSource.gallery.dataset.recentVote = 'true';
                                }).catch(error => {
                                    // An error occurred somewhere along the way, perhaps we should notify the user.
                                    el.dataset.originalTitle = '<?= $this->translate('Could not vote, try again') ?>';
                                });
                        }
                    },
                <?php endif; ?>
            });
        <?php endif; ?>

        <?php if ($this->acl('photo_service_acl')->isAllowed('tag', 'view')): ?>
            // Register the tagging system (but only if the user is allowed to see tags).
            lightbox.pswp.ui.registerElement({
                name: 'tags-ui',
                appendTo: 'root',
                order: 42,
                isButton: false,
                html: '<?= $this->translate('Loading tags...') ?>',
                onInit: (el, pswp) => {
                    pswp.on('change', () => {
                        let figTags = pswp.currSlide.data.element.querySelector('figtags');

                        if (figTags.hasChildNodes()) {
                            el.innerHTML = figTags.innerHTML;

                            if (null !== el.querySelector(`.tagList span[data-member="${pswp.options.dataSource.gallery.dataset.lidnr}"]`)) {
                                document.querySelector('.pswp__button--profile-photo-button').classList.remove('pswp__button--hidden');
                            }

                            <?php if ($this->acl('photo_service_acl')->isAllowed('tag', 'add')): ?>
                                addTagSearch(el, figTags);
                            <?php endif; ?>
                        }
                    });

                    pswp.on('tagsLoaded', ({tags}) => {
                        // Check that we were able to load the tags.
                        if (null === tags) {
                            el.innerText = '<?= $this->translate('Cannot load tags') ?>';

                            return;
                        }

                        let lidnr = parseInt(pswp.options.dataSource.gallery.dataset.lidnr);
                        let figTags = pswp.currSlide.data.element.querySelector('figtags');
                        let id = pswp.currSlide.data.element.dataset.id;
                        let tagCount = tags.length;
                        let i = 1;

                        el.innerHTML = `
                            <span class="tag-title ${(0 === tagCount) ? 'hidden' : ''}"><?= $this->translate('In this photo:') ?></span>
                            <span class="no-tag-title ${(0 !== tagCount) ? 'hidden' : ''}"><?= $this->translate('No one has been tagged in this photo yet. Tag someone you recognise now!')?></span>
                            <div class="tagList">
                                ${tags.map((member) => {
                                    // Since we are already looping through all tags here, we can directly check if one
                                    // of the tags belongs to the current member. If so, show the "set as profile pic"
                                    // button.
                                    if (member.lidnr === lidnr) {
                                        document.querySelector('.pswp__button--profile-photo-button').classList.remove('pswp__button--hidden');
                                    }

                                    let viewMemberUrl = URLHelper.url('member/view', {lidnr: member.lidnr});
                                    let removeUrl = URLHelper.url('photo/photo/tag/remove', {photo_id: id, lidnr: member.lidnr});
                                    let spacer = (i++ && i < tagCount) ? ',&nbsp' : ((i === tagCount) ? '<?= $this->translate('and') ?>' : '');

                                    return `
                                        <span data-member="${member.lidnr}">
                                            <a href="${viewMemberUrl}">${member.fullName}</a>&nbsp;
                                            <?php if ($this->acl('photo_service_acl')->isAllowed('tag', 'remove')): ?>
                                                <a class="remove-tag" href="${removeUrl}" data-tag-id="removeTag${member.id}">
                                                    <span class="fas fa-times" aria-hidden="true"></span>
                                                </a>
                                            <?php endif; ?>
                                            <span class="tag-spacer">${spacer}</span>
                                        </span>`;
                                }).join('')}
                            </div>
                                <?php if ($this->acl('photo_service_acl')->isAllowed('tag', 'add')): ?>
                                    <div class="form-group">
                                        <label for="tagSearch"><span class="fas fa-plus"></span> <?= $this->translate('Tag someone') ?>:</label>
                                        <input type="text"
                                            data-url="${URLHelper.url('photo/photo/tag/add', {photo_id: id, lidnr: 'lidnr'})}"
                                            id="tagSearch" class="tagSearch" name="tagSearch">
                                    </div>
                                <?php endif; ?>
                        `;

                        // Replicate the tags UI to the actual figure DOM.
                        figTags.innerHTML = el.innerHTML;

                        <?php if ($this->acl('photo_service_acl')->isAllowed('tag', 'add')): ?>
                            addTagSearch(el, figTags);
                        <?php endif; ?>
                    });

                    pswp.on('zoomPanUpdate', () => {
                        let tagsUIHideTimeout;

                        if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.initial) {
                            el.classList.add('pswp__tags-ui--hidden');

                            if (tagsUIHideTimeout) {
                                clearTimeout(tagsUIHideTimeout);
                            }

                            tagsUIHideTimeout = setTimeout(() => {
                                el.hidden = true
                                tagsUIHideTimeout = null;
                            }, 300);
                        } else {
                            el.hidden = false;

                            if (tagsUIHideTimeout) {
                                clearTimeout(tagsUIHideTimeout);
                            }

                            tagsUIHideTimeout = setTimeout(() => {
                                el.classList.remove('pswp__tags-ui--hidden');
                                tagsUIHideTimeout = null;
                            }, 50);
                        }
                    });
                },
            });
        <?php endif; ?>

        <?php if ($this->acl('photo_service_acl')->isAllowed('photo', 'view_metadata')): ?>
            // Register the metadata UI.
            lightbox.pswp.ui.registerElement({
                name: 'metadata-ui',
                appendTo: 'root',
                order: 43,
                isButton: false,
                html: '<?= $this->translate('Cannot load metadata') ?>',
                onInit: (el, pswp) => {
                    pswp.on('change', () => {
                        let currentSlide = pswp.currSlide.data.element;

                        // Copy all HTML.
                        el.innerHTML = currentSlide.querySelector('figcaption').innerHTML;
                    });
                },
            });
        <?php endif; ?>

        lightbox.pswp.ui.registerElement({
            name: 'photo-of-the-week-ui',
            appendTo: 'root',
            order: 44,
            isButton: false,
            html: '',
            onInit: (el, pswp) => {
                pswp.on('change', () => {
                    let currentSlide = pswp.currSlide.data.element;
                    let weeklyDate = currentSlide.dataset.weeklyDate;

                    if (undefined !== weeklyDate) {
                        let date = new Date(weeklyDate)
                        let currentWeek = date.getWeekNumber();
                        el.innerHTML = `<span class="fas fa-award"></span> <?= $this->translate('Photo of the Week:<br> Week') ?> ${currentWeek} <?= $this->translate('of') ?> ${date.getUTCFullYear()}`;
                        el.hidden = false;
                    } else {
                        el.hidden = true;
                        // el.classList.add('pswp__photo-of-the-week-ui--hidden');
                    }
                });

                pswp.on('zoomPanUpdate', () => {
                    let potwUIHideTimeout;

                    // Hide the Photo of the Week message when zooming but only when it is not being displayed.
                    if (!el.hidden || el.classList.contains('pswp__photo-of-the-week-ui--hidden')) {
                        if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.initial) {
                            el.classList.add('pswp__photo-of-the-week-ui--hidden');

                            if (potwUIHideTimeout) {
                                clearTimeout(potwUIHideTimeout);
                            }

                            potwUIHideTimeout = setTimeout(() => {
                                el.hidden = true
                                potwUIHideTimeout = null;
                            }, 300);
                        } else {
                            el.hidden = false;

                            if (potwUIHideTimeout) {
                                clearTimeout(potwUIHideTimeout);
                            }

                            potwUIHideTimeout = setTimeout(() => {
                                el.classList.remove('pswp__photo-of-the-week-ui--hidden');
                                potwUIHideTimeout = null;
                            }, 50);
                        }
                    }
                });
            },
        });
    });

    // If the tag search is being used, do not allow zooming using the `z` or arrow keys.
    lightbox.on('keydown', (e)  => {
        let pressedKey = e.originalEvent.keyCode;
        let tagSearch = document.querySelector('.pswp__tags-ui .tagSearch');

        if (
            document.activeElement === tagSearch
            && (
                90 === pressedKey
                || ("" !== tagSearch.value && (37 === pressedKey || 39 === pressedKey))
            )
        ) {
            e.preventDefault();
        }
    });

    // To properly show the tooltips (not the native titles) we need to inject the event handlers, but only after the UI
    // has been created (which is guaranteed to be before `afterInit`).
    lightbox.on('afterInit', () => {
        $('.pswp__top-bar').tooltip({
            placement: 'bottom',
            selector: '[title]',
        });

        document.querySelectorAll('.pswp__top-bar [title]').forEach(element => {
            element.dataset.originalTitle = element.title;
            element.title = "";
        });
    });

    <?php if (
        $this->acl('photo_service_acl')->isAllowed('tag', 'view')
        && $this->acl('photo_service_acl')->isAllowed('vote', 'view')
    ): ?>
        // Fetch the tags and voted status.
        lightbox.on('gettingData', ({slide}) => {
            // When opening the photo viewer, there is initially no slide.
            if (undefined !== slide) {
                // Unfortunately, slide are unloaded at some point, so we cannot permanently store the obtained data,
                // hence our only hope is that we managed to get data into the actual DOM to be able to determine if we
                // need to fetch the tags/voted status again.
                if (!slide.data.element.querySelector('figtags').hasChildNodes()) {
                    slide.data = {
                        ...slide.data,
                        details: fetch(slide.data.element.dataset.detailsUrl),
                    };
                }
            }
        });
    <?php endif; ?>

    // Update the last active element when a new slide is shown.
    lightbox.on('change', () => {
        lastActiveElement = lightbox.pswp.currSlide.data.element;

        lightbox.pswp.currSlide.data.details?.then(response => response.json())
            .then((data) => {
                lightbox.pswp.dispatch('tagsLoaded', {tags: data.tags});
                lightbox.pswp.dispatch('votedLoaded', {voted: data.voted});
                lightbox.pswp.currSlide.data.details = null;
            }).catch(() => {
                lightbox.pswp.dispatch('tagsLoaded', {tags: null});
                lightbox.pswp.dispatch('votedLoaded', {voted: null});
                lightbox.pswp.currSlide.data.details = null;
            });
    });

    lightbox.on('close', () => {
        // Remove all remaining autocomplete suggestion elements.
        document.querySelectorAll('.autocomplete-suggestions').forEach(element => {
            element.remove();
        });

        let elBoundingBox = lastActiveElement.getBoundingClientRect();

        // If the last active element is slightly outside the viewport, scroll it into view (preferably centered).
        if (
            elBoundingBox.top < 0
            || elBoundingBox.left < 0
            || elBoundingBox.bottom > (window.innerHeight || document.documentElement.clientHeight)
            || elBoundingBox.right > (window.innerWidth || document.documentElement.clientWidth)
        ) {
            lastActiveElement.scrollIntoView({block: 'center'});
        }

        lastActiveElement = null;
    });

    lightbox.init();

    // Check if the hash is present in the URL, if so, parse and try to open the lightbox for the provided image.
    const idMatcher = /^pid=(\d+)$/i;
    const pid = window.location.hash.substring(1).match(idMatcher);

    if (null !== pid) {
        document.querySelector(`.pswp-gallery__item[data-id="${parseInt(pid[1], 10)}"]`)?.click();
    }
</script>
