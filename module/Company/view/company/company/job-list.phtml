<?php

$locale = $this->translator->getLocale();
$cat = NULL;
if (!$all) {
    $cat = $this->category->getId();
}
$highlights = $this->highlightedIds($cat, $locale);
// set title
if (isset($this->company)) {
    $this->headTitle($this->company->getName());
}
$this->headTitle($all ? 'All Vacancies' : $this->category->getPluralName());
?>
<section class="section section-breadcrumb">
    <div class="container">
        <ol class="breadcrumb">
            <li>
                <a href="<?= $this->url('company') ?>">
                    <?= $this->translate('Companies') ?>
                </a>
            </li>
            <?php if (isset($this->company)): ?>
                <li>
                    <a href="<?= $this->url('company/companyItem', ['slugCompanyName' => $this->company->getSlugName()]) ?>">
                        <?= $this->company->getName(); ?>
                    </a>
                </li>
            <?php endif; ?>
            <li class="active">
                <?= $all ? 'All Vacancies' : $category->getPluralName() ?>
            </li>
        </ol>
    </div>
</section>

<section class="section">
    <div class="container">
        <!--        <div class="row">-->
        <!--            <div class="col-md-12">-->
        <!--                <h1>--><? //= $all ? 'All Vacancies' : $category->getPluralName() ?><!--</h1>-->
        <!--            </div>-->
        <!--        </div>-->
        <div class="row">
            <div class="col-md-12">
                <div class="filter-bar">
                    <div class="form-group">
                        <label for="job-search"><span class="fas fa-search"></span></label>
                        <input
                            type="text"
                            class="form-control"
                            id="job-search"
                            placeholder="<?= $this->translate('What are you looking for?') ?>"/>
                    </div>
                    <div class="form-group">
                        <label for="job-sort"><?= $this->translate('Sort on') ?></label>
                        <select name="sort" id="job-sort" class="form-control">
                            <option value="random"><?= $this->translate('Random') ?></option>
                            <option value="sector"><?= $this->translate('Sector') ?></option>
                            <option value="name"><?= $this->translate('Name') ?></option>
                            <option value="startingDate"><?= $this->translate('Starting Date') ?></option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="hours-filter"><?= $this->translate('Hours') ?></label>
                        <select name="hours" id="hours-filter" class="form-control">
                            <option value="all"><?= $this->translate('All') ?></option>
                            <option value="part-time"><?= $this->translate('Part Time') ?></option>
                            <option value="full-time"><?= $this->translate('Full Time') ?></option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="sectors-filter"><?= $this->translate('Sectors') ?></label>
                        <select name="sectors" id="sector-filter" class="form-control">
                            <option value="all"> <?= $this->translate("All") ?></option>
                            <?php foreach ($this->jobSectors($locale) as $sector): ?>
                                <option
                                    value="<?= $sector->getLanguageNeutralId() ?>"> <?= $sector->getName() ?></option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                    <?php if (isset($this->company)): ?>
                        <div class="form-group">
                            <label><?= $this->translate('Company') ?></label>
                            <a href="<?= $this->url('company/jobList', ['category' => $category->getSlug()]) ?>"
                               class="btn btn-default btn-filter align-middle">
                                <span class="btn-text" title="<?= $company->getName() ?>">
                                    <?= $company->getName() ?>
                                </span>
                                <span class="far fa-trash-alt"></span>
                            </a>
                        </div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
        <?php if (empty($jobList)): ?>
            <div class="row">
                <div class="col-md-12" style="margin-top: 1em">
                    <h4>No Results</h4>
                    <p><?= sprintf($this->translate("Unfortunately, there aren't any %s at the moment."), $all ? 'vacancies' : strtolower($category->getPluralName())) ?></p>
                </div>
            </div>
        <?php else: ?>
        <div class="row">
            <div class="col-md-12">
                <h1><?= $all ? 'Highlighted Vacancies' : 'Highlighted ' . $category->getPluralName() ?></h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="highlight-grid">
<!--                    <div class="slideshow-container">-->
                        <?php foreach ($highlights as $index => $job): ?>
                        <div class="mySlides">
                            <?php
                            $company = $job->getPackage()->getCompany();

                            $jobUrl = $this->url('company/companyItem/joblist/job_item', [
                                'slugCompanyName' => $company->getSlugName(),
                                'slugJobName' => $job->getSlugName(),
                                'category' => $job->getCategory()->getSlug(),
                            ]);
                            ?>
                            <a href="<?= $jobUrl ?>" class="<?= "highlighted" ?>" data-index="<?= $index ?>"
                               data-posted="<?= $job->getTimestamp()->format(DateTime::ATOM) ?>"
                               data-sector="<?= $job->getSectors()->getName() ?>"
                               data-name="<?= $job->getName() ?>"
                               data-starts="<?= ($job->getStartingDate()!= null) ? $job->getStartingDate()->format(DateTime::ATOM) : "Continuous" ?>">
                                <div class="card-img">
                                    <img
                                    src="<?= $this->fileUrl($company->getTranslationFromLocale($locale)->getLogo()) ?>"
                                    alt="<?= $this->escapeHtmlAttr($company->getName()) ?>"/>
                                </div>
                                <div class="text">
                                    <h2 class="card-title"><?= $job->getName() ?></h2>
                                    <p class="card-subtitle text-muted"><?= $company->getName() ?></p>
                                    <div>
                                        <?php foreach ($job->getLabels() as $labelAsg): ?>
                                            <?php $label = $labelAsg->getLabel(); ?>
                                            <span class="label label-default job-label"
                                                  data-label="<?= $label->getSlug(); ?>" data-toggle="tooltip"
                                                  title="<?= $label->getName(); ?>"><?= $label->getSlug(); ?></span>
                                        <?php endforeach; ?>
                                    </div>
                                    <div>
                                        <br>
                                        <?php if ($job->getTeaser() != null) : ?>
                                            <p class="card-subtitle text-muted"><?= $job->getTeaser() ?></p>
                                        <?php endif; ?>
                                    </div>
                                    <span class="label label-default job-hours"
                                          data-hours="<?= $job->getHours(); ?>" data-toggle="tooltip"></span>
                                    <span class="label label-default job-sectors"
                                          data-sectors="<?= $job->getSectors()->getLanguageNeutralId(); ?>"
                                          data-toggle="tooltip"></span>
                                </div>
                                <div class="card-footer">
                                    <span class="small">
                                        <?php if (!is_null($job->getLocation())): ?>
                                            <p class="job-location"><?= $job->getLocation() ?></p>
                                        <?php endif; ?>
                                        </span>
                                    <button class="btn btn-link"><?= $this->translate('View') ?></button>
                                </div>
                            </a>
                        </div>
                        <?php endforeach; ?>
                        <!-- Next and previous buttons -->
                        <div class="prev" onclick="plusSlides(-1)">&#10094;</div>
                        <div class="next" onclick="plusSlides(1)">&#10095;</div>
                    </div>
                </div>
                <!-- The dots/circles -->
                <div style="text-align:center;">
                    <span class="dot" onclick="currentSlide(1)"></span>
                    <span class="dot" onclick="currentSlide(2)"></span>
                    <span class="dot" onclick="currentSlide(3)"></span>
                </div>
            </div>
        </div>
</section>

<section>
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h1><?= $all ? 'All Vacancies' : 'All ' . $category->getPluralName() ?></h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card-grid">
                    <?php foreach ($jobList as $index => $job): ?>
                        <?php
                        $company = $job->getPackage()->getCompany();

                        $jobUrl = $this->url('company/companyItem/joblist/job_item', [
                            'slugCompanyName' => $company->getSlugName(),
                            'slugJobName' => $job->getSlugName(),
                            'category' => $job->getCategory()->getSlug(),
                        ]);
                        ?>
                        <a href="<?= $jobUrl ?>" class="<?= "card" ?>" data-index="<?= $index ?>"
                           data-posted="<?= $job->getTimestamp()->format(DateTime::ATOM) ?>"
                           data-sector="<?= $job->getSectors()->getName() ?>"
                           data-name="<?= $job->getName() ?>"
                           data-starts="<?= ($job->getStartingDate()!= null) ? $job->getStartingDate()->format(DateTime::ATOM) : "Continuous"  ?>">
                            <div class="card-img">
                                <img
                                src="<?= $this->fileUrl($company->getTranslationFromLocale($locale)->getLogo()) ?>"
                                alt="<?= $this->escapeHtmlAttr($company->getName()) ?>"/>
                            </div>
                            <h2 class="card-title"><?= $job->getName() ?></h2>
                            <p class="card-subtitle text-muted"><?= $company->getName() ?></p>
                            <div>
                                <?php foreach ($job->getLabels() as $labelAsg): ?>
                                    <?php $label = $labelAsg->getLabel(); ?>
                                    <span class="label label-default job-label"
                                          data-label="<?= $label->getSlug(); ?>" data-toggle="tooltip"
                                          title="<?= $label->getName(); ?>"><?= $label->getSlug(); ?></span>
                                <?php endforeach; ?>
                            </div>
                            <span class="label label-default job-hours"
                                  data-hours="<?= $job->getHours(); ?>" data-toggle="tooltip"></span>
                            <span class="label label-default job-sectors"
                                  data-sectors="<?= $job->getSectors()->getLanguageNeutralId(); ?>"
                                  data-toggle="tooltip"></span>
                            <div class="card-footer">
                                <button class="btn btn-link"><?= $this->translate('View') ?></button>
                                <span class="small">
                                    <?php if (!is_null($job->getLocation())): ?>
                                        <p class="job-location"><?= $job->getLocation() ?></p>
                                    <?php endif; ?>
                                    </span>
                            </div>
                        </a>
                    <?php endforeach; ?>
                </div>
            </div>
        </div>
        <?php endif; ?>
        <?php
        $alternatives = [];
        foreach ($this->jobCategories() as $c) {
            if (!$all) {
                // Don't include current category in list of alternative job categories
                if ($category->getId() === $c->getId()) {
                    continue;
                }
            }


            $alternatives[] = vsprintf('<a href="%s">%s</a>', [
                $this->url('company/jobList', ['category' => $c->getSlug()]),
                strtolower($c->getPluralName())
            ]);
        }

        $alternatives = join(', ', $alternatives);
        ?>
        <?php if (!empty($alternatives)): ?>
            <div class="row">
                <div class="col-md-4" style="margin-top: 2em">
                    <hr/>
                </div>
                <div class="col-md-12">
                    <p class="text-muted">
                        <?= sprintf($this->translate($all ? "Want to look at vacancies per category? Take a look at %s." : "Still haven't found what you're looking for? Take a look at %s."), $alternatives) ?>
                    </p>
                </div>
            </div>
        <?php endif; ?>
    </div>
</section>
<script type="text/javascript">
    var CardGrid = function ($grid, searchElements) {
        // Pre-compute card details
        var cards = $('.card', $grid).map(function () {
            var $card = $(this);

            return {
                target: $card,
                text: $(searchElements, $card).text().toLowerCase(),
                labels: $('.job-label', $card).map(function () {
                    return $(this).data('label');
                }).get(),
                hours: $('.job-hours', $card).map(function () {
                    return $(this).data('hours');
                }).get(),
                sectors: $('.job-sectors', $card).map(function () {
                    return $(this).data('sectors');
                }).get()
            };
        }).get();

        /**
         * Toggles the card visibility depending on the filter matches
         */
        var updateCardVisibility = function () {
            cards.forEach(function (card) {
                // Checks if the card matches all registered filters
                var isFullMatch = Object.values(card.isMatchOn).every(function (isMatch) {
                    return (isMatch === true);
                });

                $(card.target).toggle(isFullMatch);
            });
        };

        var sortCards = function (sortFn) {
            var sortedCards = $grid.children('.card').sort(sortFn);


            // Put vacancies with a teaser infront.
            var result1 = [], result2 = [];
            for (var i = 0; i < sortedCards.length; i++) {
                if (sortedCards[i].dataset.highlight) {
                    result1.push(sortedCards[i]);
                } else {
                    result2.push(sortedCards[i]);
                }
            }
            var result = result1.concat(result2);
            // jQuery handles moving DOM elements
            $grid.append(result);
        };

        /**
         * Registers a filter
         *
         * @param filterName   Filter's name
         * @param defaultValue If the card matches the filter by default
         */
        var registerFilter = function (filterName, defaultValue) {
            cards.forEach(function (card) {
                if (!card.hasOwnProperty('isMatchOn')) {
                    card.isMatchOn = {};
                }

                card.isMatchOn[filterName] = defaultValue;
            });
        };

        registerFilter('label', true);
        registerFilter('search', true);
        registerFilter('hours', true);
        registerFilter('sectors', true);

        return {
            filterByLabel: function (label) {
                cards.forEach(function (card) {
                    card.isMatchOn['label'] = (card.labels.indexOf(label) > -1);
                });

                updateCardVisibility();
            },
            filterByHours: function (hours) {
                cards.forEach(function (card) {
                    card.isMatchOn['hours'] = (card.hours.indexOf(hours) > -1);
                });

                updateCardVisibility();
            },
            filterBySector: function (sector) {
                cards.forEach(function (card) {
                    card.isMatchOn['sectors'] = (card.sectors.indexOf(parseInt(sector)) > -1);
                });

                updateCardVisibility();
            },
            clearHoursFilter: function () {
                cards.forEach(function (card) {
                    card.isMatchOn['hours'] = true;
                });

                updateCardVisibility();
            },
            clearLabelFilter: function () {
                cards.forEach(function (card) {
                    card.isMatchOn['label'] = true;
                });

                updateCardVisibility();
            },
            clearSectorFilter: function () {
                cards.forEach(function (card) {
                    card.isMatchOn['sectors'] = true;
                });

                updateCardVisibility();
            },
            filterByText: function (query) {
                cards.forEach(function (card) {
                    card.isMatchOn['search'] = (card.text.indexOf(query.toLowerCase()) > -1);
                });

                updateCardVisibility();
            },
            sortByStartingDateDesc: function () {
                sortCards(function (a, b) {
                    return (new Date(a.dataset.starts) < new Date(b.dataset.starts)) ? -1 : 1;
                });
            },
            sortBySector: function () {
                sortCards(function (a, b) {
                    return (a.dataset.sector.toLowerCase() > b.dataset.sector.toLowerCase()) ? -1 : 1;
                });
            },
            sortByName: function () {
                sortCards(function (a, b) {
                    return (a.dataset.name.toLowerCase() < b.dataset.name.toLowerCase()) ? -1 : 1;
                });
            },
            sortByDefault: function () {
                sortCards(function (a, b) {
                    return (parseInt(a.dataset.index) > parseInt(b.dataset.index)) ? 1 : -1;
                });
            },
        }
    };

    cardGrid = new CardGrid($('.card-grid'), '.card-title, .card-subtitle, .job-location');

    $("#job-search").keyup(function () {
        var query = $(this).val().trim();

        cardGrid.filterByText(query);
    });

    $("#job-label").change(function () {
        var label = $(this).val();

        if (label === "*") {
            cardGrid.clearLabelFilter();
        } else {
            cardGrid.filterByLabel(label);
        }
    });

    // Sort jobs on given option
    $("#job-sort").change(function () {
        switch ($(this).val()) {
            // based on sector name (can maybe be removed as there also exists a filter for this)
            case 'sector':
                cardGrid.sortBySector();
                break;
            case 'name':
                cardGrid.sortByName();
                break;
            case 'startingDate':
                cardGrid.sortByStartingDateDesc();
                break;
            default:
                cardGrid.sortByDefault();
        }
    });

    // Filter on Hours type
    $("#hours-filter").change(function () {
        switch ($(this).val()) {
            case 'part-time':
                cardGrid.filterByHours(0);
                break;
            case 'full-time':
                cardGrid.filterByHours(1);
                break;
            default:
                // also used for "all" option
                cardGrid.clearHoursFilter();
        }
    });

    // Filter on sectors
    $("#sector-filter").change(function () {
        var sector = $(this).val();

        // When "all" is selected clear all filters.
        if (sector == "all") {
            cardGrid.clearSectorFilter();
            return;
        }
        // Filter on given sector
        cardGrid.filterBySector(sector);
    });


    $('[data-toggle="tooltip"]').tooltip({
        viewport: {"selector": ".card-grid"}
    });


    var slideIndex = 1;
    showSlides(slideIndex);

    // Next/previous controls
    function plusSlides(n) {
        showSlides(slideIndex += n);
    }

    // Thumbnail image controls
    function currentSlide(n) {
        showSlides(slideIndex = n);
    }

    function showSlides(n) {
        var i;
        var slides = document.getElementsByClassName("mySlides");
        var dots = document.getElementsByClassName("dot");
        if (n > slides.length) {slideIndex = 1}
        if (n < 1) {slideIndex = slides.length}
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        for (i = 0; i < dots.length; i++) {
            dots[i].className = dots[i].className.replace(" activeDot", "");
        }
        slides[slideIndex-1].style.display = "block";
        dots[slideIndex-1].className += " activeDot";
    }
</script>
