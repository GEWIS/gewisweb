<?php

$locale = $this->translator->getLocale();
$escaper = new Zend\Escaper\Escaper('utf-8');

$this->headTitle($this->translate('Companies'));

?>
<section class="section">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="filter-bar">
                    <div class="form-group">
<!--                        todo!!!-->
                        <label for="job-search"><span class="fas fa-search"></span></label>
                        <input
                            type="text"
                            class="form-control"
                            id="job-search"
                            placeholder="<?= $this->translate('What are you looking for?') ?>"/>
                    </div>
                    <div class="form-group">
                        <label for="job-sort"><?= $this->translate('Sort on') ?></label>
                        <select name="sort" id="job-sort" class="form-control">
                            <option value="random"><?= $this->translate('Random') ?></option>
                            <option value="alphabeticallyasc"><?= $this->translate('Ascending') ?></option>
                            <option value="AlphabeticallyDes"><?= $this->translate('Descending') ?></option>
                        </select>
                    </div>
                    <?php if (isset($this->company)): ?>
                        <div class="form-group">
                            <label><?= $this->translate('Company') ?></label>
                            <a href="<?= $this->url('company/career', ['category' => $category->getSlug()]) ?>"
                               class="btn btn-default btn-filter align-middle">
                                        <span class="btn-text" title="<?= $company->getName() ?>">
                                            <?= $company->getName() ?>
                                        </span>
                                <span class="far fa-trash-alt"></span>
                            </a>
                        </div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
</section>


<section class="section">
    <div class="container">
        <div class="row" style="margin-top:50px">
            <?php if (isset($featuredPackage)): ?>
            <div class="col-md-12">
                <div class="panel panel-default">

                    <div class="panel-body">
                        <h1>
                            <a href="<?= $this->url('company/companyItem', ['slugCompanyName' => $featuredCompany->getSlugName()], [], true); ?>"><?= $featuredCompany->getName() ?></a>
                            <small><?= $this->translate('in the spotlight') ?></small>
                        </h1>
                        <?=
                        $this->partial('./companyStory.phtml', [
                            'company' => $featuredCompany,
                            'featuredPackage' => $featuredPackage,
                            'translator' => $translator,
                            'panels' => false,
                        ]);
                        ?>
                    </div>
                </div>
                <?php endif ?>
                <div class="col-md-9">
                    <div class="company-grid row">
                        <?php
                        // Randomize the order of companies
                        shuffle($companyList);
                        foreach ($companyList as $index => $company) {
                            echo $this->partial('partial/company/company/grid/company.phtml',
                                ['company' => $company, 'locale' => $locale]);
                        }
                        ?>
                        <a class="card company-card" data-index="<?= $index ?>"
                           data-companyName="<?= $company->getName()?>">
                    </div>
                </div>
            </div>
</section>

<script type="text/javascript">
    var CardGrid = function ($grid, searchElements) {
        // Pre-compute card details
        var cards = $('.card', $grid).map(function () {
            var $card = $(this);

            return {
                target: $card,
                text: $(searchElements, $card).text().toLowerCase(),
                labels: $('.job-label', $card).map(function () {
                    return $(this).data('label');
                }).get()
            };
        }).get();

        /**
         * Toggles the card visibility depending on the filter matches
         */
        var updateCardVisibility = function () {
            cards.forEach(function (card) {
                // Checks if the card matches all registered filters
                var isFullMatch = Object.values(card.isMatchOn).every(function (isMatch) {
                    return (isMatch === true);
                });

                $(card.target).toggle(isFullMatch);
            });
        };

        var sortCards = function (sortFn) {
            var sortedCards = $grid.children('.card').sort(sortFn);

            // jQuery handles moving DOM elements
            $grid.append(sortedCards);
        };

        /**
         * Registers a filter
         *
         * @param filterName   Filter's name
         * @param defaultValue If the card matches the filter by default
         */
        var registerFilter = function (filterName, defaultValue) {
            cards.forEach(function (card) {
                if (!card.hasOwnProperty('isMatchOn')) {
                    card.isMatchOn = {};
                }

                card.isMatchOn[filterName] = defaultValue;
            });
        };

        registerFilter('label', true);
        registerFilter('search', true);

        return {
            filterByLabel: function (label) {
                cards.forEach(function (card) {
                    card.isMatchOn['label'] = (card.labels.indexOf(label) > -1);
                });

                updateCardVisibility();
            },
            clearLabelFilter: function () {
                cards.forEach(function (card) {
                    card.isMatchOn['label'] = true;
                });

                updateCardVisibility();
            },
            filterByText: function (query) {
                cards.forEach(function (card) {
                    card.isMatchOn['search'] = (card.text.indexOf(query.toLowerCase()) > -1);
                });

                updateCardVisibility();
            },
            sortByDateDesc: function () {
                sortCards(function (a, b) {
                    return (new Date(a.dataset.posted) > new Date(b.dataset.posted)) ? -1 : 1;
                });
            },
            sortByDefault: function () {
                sortCards(function (a, b) {
                    console.log('test');
                    return (parseInt(a.dataset.index) > parseInt(b.dataset.index)) ? 1 : -1;
                });
            },
            sortByCompanyNameAsc: function () {
                sortCards(function (a, b) {
                    console.log('test');
                    return (a.dataset.companyName.toLowerCase() < b.dataset.companyName.toLowerCase()) ? -1 : 1;
                });
            }
            sortByCompanyNameDes: function () {
                sortCards(function (a, b) {
                    return (a.dataset.companyName.toLowerCase() < b.dataset.companyName.toLowerCase()) ? 1 : -1;
                })
            }
        }
    };

    cardGrid = new CardGrid($('.card-grid'), '.card-title, .card-subtitle, .job-location');

    $("#job-search").keyup(function () {
        var query = $(this).val().trim();

        cardGrid.filterByText(query);
    });

    $("#job-label").change(function () {
        var label = $(this).val();

        if (label === "*") {
            cardGrid.clearLabelFilter();
        } else {
            cardGrid.filterByLabel(label);
        }
    });

    $("#job-sort").change(function () {
        switch ($(this).val()) {
            case 'posted':
                cardGrid.sortByDateDesc();
                break;
            case 'alphabeticallyasc':
                console.log('test');
                cardGrid.sortByCompanyNameAsc();
                break;
            case 'AlphabeticallyDes':
                cardGrid.sortByCompanyNameDes();
                break;
            default:
                cardGrid.sortByDefault();
        }
    });

    $('[data-toggle="tooltip"]').tooltip({
        viewport: {"selector": ".card-grid"}
    });
</script>
